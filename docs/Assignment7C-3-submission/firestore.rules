rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {

        /** VALIDATION FUNCTIONS **/
        function checkEmployeeIdAsId(employeeId) { // uniqueness check
            return !(exists(/databases/$(database)/documents/employees/$(employeeId)));
        }

        function checkEmployeeId( employeeId) {
            return employeeId != null && employeeId.matches('^[0-9]+$');
        }

        function checkFirstName( fName) { // name is mandatory and must consist of letters
            return fName != null && fName.matches('^[a-zA-Z]+$');
        }

        function checkLastName( lName) {
            return lName != null && lName.matches('^[a-zA-Z]+$');
        }

        function checkBirthdate(date) {
            return (date != null && date is timestamp);
        }

        // the gender and therapySkills properties are enums, which are not covered in the tutorial for security rules

        function checkGender(gen) { // single-valued enum
            return (gen != null
                    && (gen is int || gen.matches('^[0-9]+$'))
                    && gen > 0
                    && gen <= 3);
        }

        function checkTherapySkills(theraps) { // multi-valued enum, multiplicity [0..*]
            return (theraps is list || !("therapySkills" in request.resource.data));
        }

        /** VALIDATION RULES **/
        match /employees/{document=**} {
            /** RULES FOR allow read WITH CONVENIENCE METHOD - LOW GRANULARITY **/
            /** NO authentication required **/
            allow read: if request.auth != null;

            /** RULES FOR allow write WITH STANDARD METHODS - HIGH GRANULARITY **/
            /** authentication required **/
            //validate when create new employee record
            allow create: if request.auth.token.email_verified == true
                             && checkEmployeeIdAsId(request.resource.data.employeeId) == true
                             && checkEmployeeId( request.resource.data.employeeId) == true
                             && checkFirstName( request.resource.data.firstName) == true
                             && checkLastName( request.resource.data.lastName) == true
                             && checkBirthdate( request.resource.data.birthdate) == true
                             && checkGender( request.resource.data.gender) == true
                             && checkTherapySkills( request.resource.data.therapySkills) == true;

            allow update: if request.auth.token.email_verified == true
                             && (request.resource.data.diff( resource.data).affectedKeys()
                                .hasOnly(['firstName', 'lastName', 'birthdate', 'gender', 'therapySkills']))
                             // I also need check functions for the names to ensure they are not only not null, but also only made up of letters and non-empty
                             && checkFirstName( request.resource.data.firstName) == true
                             && checkLastName( request.resource.data.lastName) == true
                             && checkBirthdate( request.resource.data.birthdate) == true
                             && checkGender( request.resource.data.gender) == true
                             && checkTherapySkills( request.resource.data.therapySkills) == true;

            // validate when delete employee record
            allow delete: if request.auth.token.email_verified == true;
        }
    }
}